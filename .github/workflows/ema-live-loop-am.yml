name: EMA Live Paper (AM loop, self-hosted Windows)

on:
  workflow_dispatch:
    inputs:
      tickers:
        description: "Comma-separated symbols (blank = EMAMerged/tickers.txt)"
        required: false
        default: ""
      dry_run:
        description: "1=log only, 0=live"
        required: false
        default: "1"
      force_run:
        description: "1=bypass market-hours gate"
        required: false
        default: "0"
      adx:
        description: "Override ADX threshold (blank=default)"
        required: false
        default: ""
      rsi_min:
        description: "Override RSI min (blank=default)"
        required: false
        default: ""
      rsi_max:
        description: "Override RSI max (blank=default)"
        required: false
        default: ""
      slope_pct:
        description: "Override EMA9 slope pct (e.g. 0.0012)"
        required: false
        default: ""
  # Cron is UTC; 13–20 ≈ 9:00–4:59 ET during DST
  schedule:
    - cron: "*/5 13-20 * * 1-5"

jobs:
  live:
    runs-on: [self-hosted, windows]
    timeout-minutes: 15
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4

      - name: Set Python path
        run: |
          echo "PYTHON_EXE=C:\Program Files\Python313\python.exe" >> $env:GITHUB_ENV

      - name: Show Python
        run: |
          & "$env:PYTHON_EXE" --version
          & "$env:PYTHON_EXE" -c "import sys; print(sys.executable)"

      - name: Install deps
        run: |
          & "$env:PYTHON_EXE" -m pip install --upgrade pip
          & "$env:PYTHON_EXE" -m pip install -r EMAMerged/requirements.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$env:GITHUB_WORKSPACE" >> $env:GITHUB_ENV

      - name: Force UTF-8 (PowerShell + Python)
        run: |
          chcp 65001 > $null
          $env:PYTHONUTF8 = "1"
          $env:PYTHONIOENCODING = "utf-8"
          [Console]::OutputEncoding = [System.Text.UTF8Encoding]::new($false)
          echo "PYTHONUTF8=1"            >> $env:GITHUB_ENV
          echo "PYTHONIOENCODING=utf-8"  >> $env:GITHUB_ENV

      - name: Ensure Alpaca base URL
        run: |
          $val = "${{ secrets.ALPACA_BASE_URL }}".Trim()
          if (-not $val) { $val = "https://paper-api.alpaca.markets" }
          echo "ALPACA_BASE_URL=$val"   >> $env:GITHUB_ENV
          echo "APCA_API_BASE_URL=$val" >> $env:GITHUB_ENV
          Write-Host "Using Alpaca URL: $val"

      - name: Run live loop once
        env:
          # Alpaca creds
          ALPACA_API_KEY:    ${{ secrets.ALPACA_KEY }}
          ALPACA_API_SECRET: ${{ secrets.ALPACA_SECRET }}

          # Optional filter overrides
          FILTER_ADX:        ${{ github.event.inputs.adx }}
          FILTER_RSI_MIN:    ${{ github.event.inputs.rsi_min }}
          FILTER_RSI_MAX:    ${{ github.event.inputs.rsi_max }}
          FILTER_SLOPE_PCT:  ${{ github.event.inputs.slope_pct }}

          # Control flags
          DRY_RUN:           ${{ github.event.inputs.dry_run }}
          FORCE_RUN:         ${{ github.event.inputs.force_run }}

          # Live log streaming
          PYTHONUNBUFFERED:  "1"
        run: |
          # Resolve symbols from input or fallback file and normalize
          $syms = "${{ github.event.inputs.tickers }}".Trim()
          if (-not $syms) {
            if (Test-Path "EMAMerged/tickers.txt") {
              $syms = (Get-Content "EMAMerged/tickers.txt" -Raw)
            }
          }
          $list = $syms -split '[\s,]+' | Where-Object { $_ -ne "" } | Select-Object -Unique
          $symbols = ($list -join ',')

          if ([string]::IsNullOrWhiteSpace($symbols)) {
            & "$env:PYTHON_EXE" -X utf8 -u EMAMerged/scripts/live_paper_loop.py `
              --config EMAMerged/config.yaml `
              --tickers EMAMerged/tickers.txt `
              --dry-run $env:DRY_RUN `
              --force-run $env:FORCE_RUN
          } else {
            & "$env:PYTHON_EXE" -X utf8 -u EMAMerged/scripts/live_paper_loop.py `
              --config EMAMerged/config.yaml `
              --symbols "$symbols" `
              --dry-run $env:DRY_RUN `
              --force-run $env:FORCE_RUN
          }
